const bcrypt = require("bcrypt");
const asyncHandler = require("express-async-handler");
const Teacher = require("../models/teacherModel");

// get all teachers
const getTeachers = asyncHandler(async (req, res) => {
  const teachers = await Teacher.find();
  res.status(200).json(teachers);
});

// create new teachers
const newTeacher = asyncHandler(async (req, res) => {
  const body = req.body;

  if (!(body.email && body.password)) {
    return res.status(400).send({ error: "Empty fields not allowed" });
  }
  let hashedPassword = await bcrypt.hash(body.password, 8);
  console.log("hashed password", hashedPassword);
  const teacher = await Teacher.create({
    name: req.body.name,
    subjects: req.body.subjects,
    level: req.body.level,
    qualification: req.body.qualification,
    experience: req.body.experience,
    salary: req.body.salary,
    email: req.body.email,
    password: hashedPassword,
  });

  res.status(200).json(teacher);
});

// update teachers data
const updateTeacher = asyncHandler(async (req, res) => {
  const teacher = await Teacher.findById(req.params.id);

  if (!teacher) {
    res.status(400);
    throw new Error("Teacher not found");
  }
  const updatedTeacher = await Teacher.findByIdAndUpdate(
    req.params.id,
    req.body
  );
  res.status(200).json(updatedTeacher);
});

// delete teachers data
const deleteTeacher = asyncHandler(async (req, res) => {
  const deletedTeacher = await Teacher.findByIdAndDelete(req.params.id);

  if (!deletedTeacher) {
    res.status(400);
    throw new Error("Teacher data deleted");
  }
  await deletedTeacher.remove();
  res.json({ id: req.params.id });
});

const getTeacherById = asyncHandler(async (req, res) => {
 
  const teacher = await Teacher.findById(req.params.id);
  if (!teacher) {
    res.status(400);
    throw new Error("Teacher not found");
  } else {
    res.json(teacher);
  }
});

module.exports = {
  getTeachers,
  newTeacher,
  updateTeacher,
  deleteTeacher,
  getTeacherById
};
